// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleAPI.Infrastructure;

namespace SampleAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200613165617_Create Models TypeMedicalAppointment and Medical Appointment")]
    partial class CreateModelsTypeMedicalAppointmentandMedicalAppointment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SampleAPI.Domain.Models.MedicalAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("TypeMedicalAppointmentId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("TypeMedicalAppointmentId");

                    b.HasIndex("Username");

                    b.ToTable("MedicalAppointment");
                });

            modelBuilder.Entity("SampleAPI.Domain.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Rol");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("SampleAPI.Domain.Models.TypeMedicalAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TypeMedicalAppointment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Medicina General"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Odontología"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pediatría"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Neurología"
                        });
                });

            modelBuilder.Entity("SampleAPI.Domain.User", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("RolId");

                    b.HasKey("Username");

                    b.HasIndex("RolId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "Administrator",
                            Email = "Administrator@email.com",
                            Name = "Mr. Administrator",
                            Password = "Admin123",
                            RolId = 1
                        });
                });

            modelBuilder.Entity("SampleAPI.Domain.Models.MedicalAppointment", b =>
                {
                    b.HasOne("SampleAPI.Domain.Models.TypeMedicalAppointment", "TypeMedicalAppointment")
                        .WithMany("MedicalAppointment")
                        .HasForeignKey("TypeMedicalAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SampleAPI.Domain.User", "User")
                        .WithMany("MedicalAppointment")
                        .HasForeignKey("Username");
                });

            modelBuilder.Entity("SampleAPI.Domain.User", b =>
                {
                    b.HasOne("SampleAPI.Domain.Models.Rol", "Rol")
                        .WithMany("User")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
